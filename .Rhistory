if(transformation == "cube_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/3))
}else if(transformation == "square_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/2))
}else if(transformation == "log_2"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log2(metabolomicsDataGroups[,5:columns]))
}else if(transformation == "log_10"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log10(metabolomicsDataGroups[,5:columns]))
}else{print("Warning: name for transformation not recognized")}
## Visualize the data before and after transformation (for one sample to get an idea of suitability of transformation:
#create histogram for original distribution for first column with data
hist(metabolomicsDataGroups[,5], col='steelblue', main='Original')
#create histogram for log-transformed distribution
hist(metabolomicsDataGroups_transformed[,5], col='coral2', main=transformation)
## Test if the transformation creates a normally distributed dataset (alpha >= 0.05)
##Calculate all Shapiro values for raw and transformed data:
metabolomicsDataGroups_Shapiro <- lapply(metabolomicsDataGroups[,5:columns], shapiro.test)
metabolomicsDataGroups_transformed_Shapiro <- lapply(metabolomicsDataGroups_transformed[,5:columns], shapiro.test)
#Obtain the p-values for raw and transformed data
metabolomicsDataGroups_Shapiro_pvalues <- do.call(rbind, metabolomicsDataGroups_Shapiro)
metabolomicsDataGroups_transformed_Shapiro_pvalues <- do.call(rbind, metabolomicsDataGroups_transformed_Shapiro)
## Count how often the p-value is above 0.05, to obtain an estimate of achieved normality due to transformation
metabolomicsDataGroups_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
metabolomicsDataGroups_transformed_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_transformed_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
eighty_percent <- floor(((columns)/10)*8)
#Print relevant information:
if(metabolomicsDataGroups_Shapiro_pvalues_sum[1] > eighty_percent ){paste0("Data after ", transformation ," transformation seems to follow a normal distribution for more then 80% of your data")} else{
print("Advised to select a different data transformation procedure")}
##Transformation (see https://doi.org/10.1177%2F1469066720918446 and https://www.statology.org/transform-data-in-r/)
##Users can select different transformation styles here:
transformation <- "cube_root" # options are: cube_root, square_root, log_2, log_10
if(transformation == "cube_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/3))
}else if(transformation == "square_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/2))
}else if(transformation == "log_2"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log2(metabolomicsDataGroups[,5:columns]))
}else if(transformation == "log_10"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log10(metabolomicsDataGroups[,5:columns]))
}else{print("Warning: name for transformation not recognized")}
## Visualize the data before and after transformation (for one sample to get an idea of suitability of transformation:
#create histogram for original distribution for first column with data
hist(metabolomicsDataGroups[,5], col='steelblue', main='Original')
#create histogram for log-transformed distribution
hist(metabolomicsDataGroups_transformed[,5], col='coral2', main=transformation)
## Test if the transformation creates a normally distributed dataset (alpha >= 0.05)
##Calculate all Shapiro values for raw and transformed data:
metabolomicsDataGroups_Shapiro <- lapply(metabolomicsDataGroups[,5:columns], shapiro.test)
metabolomicsDataGroups_transformed_Shapiro <- lapply(metabolomicsDataGroups_transformed[,5:columns], shapiro.test)
#Obtain the p-values for raw and transformed data
metabolomicsDataGroups_Shapiro_pvalues <- do.call(rbind, metabolomicsDataGroups_Shapiro)
metabolomicsDataGroups_transformed_Shapiro_pvalues <- do.call(rbind, metabolomicsDataGroups_transformed_Shapiro)
## Count how often the p-value is above 0.05, to obtain an estimate of achieved normality due to transformation
metabolomicsDataGroups_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
metabolomicsDataGroups_transformed_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_transformed_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
eighty_percent <- floor(((columns)/10)*8)
metabolomicsDataGroups_Shapiro_pvalues_sum[1]
##Transformation (see https://doi.org/10.1177%2F1469066720918446 and https://www.statology.org/transform-data-in-r/)
##Users can select different transformation styles here:
transformation <- "square_root" # options are: cube_root, square_root, log_2, log_10
if(transformation == "cube_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/3))
}else if(transformation == "square_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/2))
}else if(transformation == "log_2"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log2(metabolomicsDataGroups[,5:columns]))
}else if(transformation == "log_10"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log10(metabolomicsDataGroups[,5:columns]))
}else{print("Warning: name for transformation not recognized")}
## Visualize the data before and after transformation (for one sample to get an idea of suitability of transformation:
#create histogram for original distribution for first column with data
hist(metabolomicsDataGroups[,5], col='steelblue', main='Original')
#create histogram for log-transformed distribution
hist(metabolomicsDataGroups_transformed[,5], col='coral2', main=transformation)
## Test if the transformation creates a normally distributed dataset (alpha >= 0.05)
##Calculate all Shapiro values for raw and transformed data:
metabolomicsDataGroups_Shapiro <- lapply(metabolomicsDataGroups[,5:columns], shapiro.test)
metabolomicsDataGroups_transformed_Shapiro <- lapply(metabolomicsDataGroups_transformed[,5:columns], shapiro.test)
#Obtain the p-values for raw and transformed data
metabolomicsDataGroups_Shapiro_pvalues <- do.call(rbind, metabolomicsDataGroups_Shapiro)
metabolomicsDataGroups_transformed_Shapiro_pvalues <- do.call(rbind, metabolomicsDataGroups_transformed_Shapiro)
## Count how often the p-value is above 0.05, to obtain an estimate of achieved normality due to transformation
metabolomicsDataGroups_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
metabolomicsDataGroups_transformed_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_transformed_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
eighty_percent <- floor(((columns)/10)*8)
metabolomicsDataGroups_Shapiro_pvalues_sum[1]
##Transformation (see https://doi.org/10.1177%2F1469066720918446 and https://www.statology.org/transform-data-in-r/)
##Users can select different transformation styles here:
transformation <- "log_2" # options are: cube_root, square_root, log_2, log_10
if(transformation == "cube_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/3))
}else if(transformation == "square_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/2))
}else if(transformation == "log_2"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log2(metabolomicsDataGroups[,5:columns]))
}else if(transformation == "log_10"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log10(metabolomicsDataGroups[,5:columns]))
}else{print("Warning: name for transformation not recognized")}
## Visualize the data before and after transformation (for one sample to get an idea of suitability of transformation:
#create histogram for original distribution for first column with data
hist(metabolomicsDataGroups[,5], col='steelblue', main='Original')
#create histogram for log-transformed distribution
hist(metabolomicsDataGroups_transformed[,5], col='coral2', main=transformation)
## Test if the transformation creates a normally distributed dataset (alpha >= 0.05)
##Calculate all Shapiro values for raw and transformed data:
metabolomicsDataGroups_Shapiro <- lapply(metabolomicsDataGroups[,5:columns], shapiro.test)
metabolomicsDataGroups_transformed_Shapiro <- lapply(metabolomicsDataGroups_transformed[,5:columns], shapiro.test)
#Obtain the p-values for raw and transformed data
metabolomicsDataGroups_Shapiro_pvalues <- do.call(rbind, metabolomicsDataGroups_Shapiro)
metabolomicsDataGroups_transformed_Shapiro_pvalues <- do.call(rbind, metabolomicsDataGroups_transformed_Shapiro)
## Count how often the p-value is above 0.05, to obtain an estimate of achieved normality due to transformation
metabolomicsDataGroups_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
metabolomicsDataGroups_transformed_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_transformed_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
eighty_percent <- floor(((columns)/10)*8)
metabolomicsDataGroups_Shapiro_pvalues_sum[1]
#Print relevant information:
if(metabolomicsDataGroups_transformed_Shapiro_pvalues_sum[1] > eighty_percent ){paste0("Data after ", transformation ," transformation seems to follow a normal distribution for more then 80% of your data")} else{
print("Advised to select a different data transformation procedure")}
metabolomicsDataGroups_transformed_Shapiro_pvalues_sum[1]
##Transformation (see https://doi.org/10.1177%2F1469066720918446 and https://www.statology.org/transform-data-in-r/)
##Users can select different transformation styles here:
transformation <- "cube_root" # options are: cube_root, square_root, log_2, log_10
if(transformation == "cube_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/3))
}else if(transformation == "square_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/2))
}else if(transformation == "log_2"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log2(metabolomicsDataGroups[,5:columns]))
}else if(transformation == "log_10"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log10(metabolomicsDataGroups[,5:columns]))
}else{print("Warning: name for transformation not recognized")}
## Visualize the data before and after transformation (for one sample to get an idea of suitability of transformation:
#create histogram for original distribution for first column with data
hist(metabolomicsDataGroups[,5], col='steelblue', main='Original')
#create histogram for log-transformed distribution
hist(metabolomicsDataGroups_transformed[,5], col='coral2', main=transformation)
## Test if the transformation creates a normally distributed dataset (alpha >= 0.05)
##Calculate all Shapiro values for raw and transformed data:
metabolomicsDataGroups_Shapiro <- lapply(metabolomicsDataGroups[,5:columns], shapiro.test)
metabolomicsDataGroups_transformed_Shapiro <- lapply(metabolomicsDataGroups_transformed[,5:columns], shapiro.test)
#Obtain the p-values for raw and transformed data
metabolomicsDataGroups_Shapiro_pvalues <- do.call(rbind, metabolomicsDataGroups_Shapiro)
metabolomicsDataGroups_transformed_Shapiro_pvalues <- do.call(rbind, metabolomicsDataGroups_transformed_Shapiro)
## Count how often the p-value is above 0.05, to obtain an estimate of achieved normality due to transformation
metabolomicsDataGroups_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
metabolomicsDataGroups_transformed_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_transformed_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
eighty_percent <- floor(((columns)/10)*8)
metabolomicsDataGroups_transformed_Shapiro_pvalues_sum[1]
##Transformation (see https://doi.org/10.1177%2F1469066720918446 and https://www.statology.org/transform-data-in-r/)
##Users can select different transformation styles here:
transformation <- "square_root" # options are: cube_root, square_root, log_2, log_10
if(transformation == "cube_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/3))
}else if(transformation == "square_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/2))
}else if(transformation == "log_2"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log2(metabolomicsDataGroups[,5:columns]))
}else if(transformation == "log_10"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log10(metabolomicsDataGroups[,5:columns]))
}else{print("Warning: name for transformation not recognized")}
## Visualize the data before and after transformation (for one sample to get an idea of suitability of transformation:
#create histogram for original distribution for first column with data
hist(metabolomicsDataGroups[,5], col='steelblue', main='Original')
#create histogram for log-transformed distribution
hist(metabolomicsDataGroups_transformed[,5], col='coral2', main=transformation)
## Test if the transformation creates a normally distributed dataset (alpha >= 0.05)
##Calculate all Shapiro values for raw and transformed data:
metabolomicsDataGroups_Shapiro <- lapply(metabolomicsDataGroups[,5:columns], shapiro.test)
metabolomicsDataGroups_transformed_Shapiro <- lapply(metabolomicsDataGroups_transformed[,5:columns], shapiro.test)
#Obtain the p-values for raw and transformed data
metabolomicsDataGroups_Shapiro_pvalues <- do.call(rbind, metabolomicsDataGroups_Shapiro)
metabolomicsDataGroups_transformed_Shapiro_pvalues <- do.call(rbind, metabolomicsDataGroups_transformed_Shapiro)
## Count how often the p-value is above 0.05, to obtain an estimate of achieved normality due to transformation
metabolomicsDataGroups_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
metabolomicsDataGroups_transformed_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_transformed_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
eighty_percent <- floor(((columns)/10)*8)
(metabolomicsDataGroups_transformed_Shapiro_pvalues_sum[1]
)
##Transformation (see https://doi.org/10.1177%2F1469066720918446 and https://www.statology.org/transform-data-in-r/)
##Users can select different transformation styles here:
transformation <- "log_2" # options are: cube_root, square_root, log_2, log_10
if(transformation == "cube_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/3))
}else if(transformation == "square_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/2))
}else if(transformation == "log_2"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log2(metabolomicsDataGroups[,5:columns]))
}else if(transformation == "log_10"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log10(metabolomicsDataGroups[,5:columns]))
}else{print("Warning: name for transformation not recognized")}
## Visualize the data before and after transformation (for one sample to get an idea of suitability of transformation:
#create histogram for original distribution for first column with data
hist(metabolomicsDataGroups[,5], col='steelblue', main='Original')
#create histogram for log-transformed distribution
hist(metabolomicsDataGroups_transformed[,5], col='coral2', main=transformation)
## Test if the transformation creates a normally distributed dataset (alpha >= 0.05)
##Calculate all Shapiro values for raw and transformed data:
metabolomicsDataGroups_Shapiro <- lapply(metabolomicsDataGroups[,5:columns], shapiro.test)
metabolomicsDataGroups_transformed_Shapiro <- lapply(metabolomicsDataGroups_transformed[,5:columns], shapiro.test)
#Obtain the p-values for raw and transformed data
metabolomicsDataGroups_Shapiro_pvalues <- do.call(rbind, metabolomicsDataGroups_Shapiro)
metabolomicsDataGroups_transformed_Shapiro_pvalues <- do.call(rbind, metabolomicsDataGroups_transformed_Shapiro)
## Count how often the p-value is above 0.05, to obtain an estimate of achieved normality due to transformation
metabolomicsDataGroups_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
metabolomicsDataGroups_transformed_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_transformed_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
eighty_percent <- floor(((columns)/10)*8)
#Print relevant information:
if(metabolomicsDataGroups_transformed_Shapiro_pvalues_sum[1] > eighty_percent ){paste0("Data after ", transformation ," transformation seems to follow a normal distribution for more then 80% of your data")} else{
print("Advised to select a different data transformation procedure")}
(metabolomicsDataGroups_transformed_Shapiro_pvalues_sum[1] )
##Transformation (see https://doi.org/10.1177%2F1469066720918446 and https://www.statology.org/transform-data-in-r/)
##Users can select different transformation styles here:
transformation <- "log_10" # options are: cube_root, square_root, log_2, log_10
if(transformation == "cube_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/3))
}else if(transformation == "square_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/2))
}else if(transformation == "log_2"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log2(metabolomicsDataGroups[,5:columns]))
}else if(transformation == "log_10"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log10(metabolomicsDataGroups[,5:columns]))
}else{print("Warning: name for transformation not recognized")}
## Visualize the data before and after transformation (for one sample to get an idea of suitability of transformation:
#create histogram for original distribution for first column with data
hist(metabolomicsDataGroups[,5], col='steelblue', main='Original')
#create histogram for log-transformed distribution
hist(metabolomicsDataGroups_transformed[,5], col='coral2', main=transformation)
## Test if the transformation creates a normally distributed dataset (alpha >= 0.05)
##Calculate all Shapiro values for raw and transformed data:
metabolomicsDataGroups_Shapiro <- lapply(metabolomicsDataGroups[,5:columns], shapiro.test)
metabolomicsDataGroups_transformed_Shapiro <- lapply(metabolomicsDataGroups_transformed[,5:columns], shapiro.test)
#Obtain the p-values for raw and transformed data
metabolomicsDataGroups_Shapiro_pvalues <- do.call(rbind, metabolomicsDataGroups_Shapiro)
metabolomicsDataGroups_transformed_Shapiro_pvalues <- do.call(rbind, metabolomicsDataGroups_transformed_Shapiro)
## Count how often the p-value is above 0.05, to obtain an estimate of achieved normality due to transformation
metabolomicsDataGroups_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
metabolomicsDataGroups_transformed_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_transformed_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
eighty_percent <- floor(((columns)/10)*8)
#Print relevant information:
if(metabolomicsDataGroups_transformed_Shapiro_pvalues_sum[1] > eighty_percent ){paste0("Data after ", transformation ," transformation seems to follow a normal distribution for more then 80% of your data")} else{
print("Advised to select a different data transformation procedure")}
metabolomicsDataGroups_transformed_Shapiro_pvalues_sum[1]
floor(((columns)/10)*8)
floor(((columns)/10)*7.5)
##Transformation (see https://doi.org/10.1177%2F1469066720918446 and https://www.statology.org/transform-data-in-r/)
##Users can select different transformation styles here:
transformation <- "cube_root" # options are: log_2, log_10, square_root, cube_root
if(transformation == "cube_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/3))
}else if(transformation == "square_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/2))
}else if(transformation == "log_2"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log2(metabolomicsDataGroups[,5:columns]))
}else if(transformation == "log_10"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log10(metabolomicsDataGroups[,5:columns]))
}else{print("Warning: name for transformation not recognized")}
## Visualize the data before and after transformation (for one sample to get an idea of suitability of transformation:
#create histogram for original distribution for first column with data
hist(metabolomicsDataGroups[,5], col='steelblue', main='Original')
#create histogram for log-transformed distribution
hist(metabolomicsDataGroups_transformed[,5], col='coral2', main=transformation)
## Test if the transformation creates a normally distributed dataset (alpha >= 0.05)
##Calculate all Shapiro values for raw and transformed data:
metabolomicsDataGroups_Shapiro <- lapply(metabolomicsDataGroups[,5:columns], shapiro.test)
metabolomicsDataGroups_transformed_Shapiro <- lapply(metabolomicsDataGroups_transformed[,5:columns], shapiro.test)
#Obtain the p-values for raw and transformed data
metabolomicsDataGroups_Shapiro_pvalues <- do.call(rbind, metabolomicsDataGroups_Shapiro)
metabolomicsDataGroups_transformed_Shapiro_pvalues <- do.call(rbind, metabolomicsDataGroups_transformed_Shapiro)
## Count how often the p-value is above 0.05, to obtain an estimate of achieved normality due to transformation
metabolomicsDataGroups_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
metabolomicsDataGroups_transformed_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_transformed_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
seventyfive_percent <- floor(((columns)/10)*75)
#Print relevant information:
if(metabolomicsDataGroups_transformed_Shapiro_pvalues_sum[1] > seventyfive_percent ){paste0("Data after ", transformation ," transformation seems to follow a normal distribution for more then 80% of your data")} else{
print("Advised to select a different data transformation procedure")}
metabolomicsDataGroups_transformed_Shapiro_pvalues_sum[1]
floor(((columns)/10)*75)
seventyfive_percent <- floor(((columns)/10)*7.5)
#Print relevant information:
if(metabolomicsDataGroups_transformed_Shapiro_pvalues_sum[1] > seventyfive_percent ){paste0("Data after ", transformation ," transformation seems to follow a normal distribution for more then 80% of your data")} else{
print("Advised to select a different data transformation procedure")}
# Visualize all information in a heatmap
heatmaply::heatmaply(metabolomicsDataGroups_transformed[,5:103], grid_gap = 0, colors = heat.colors(200), showticklabels = c(T, F), margins = c(80, 10))
if(!"rstatix" %in% installed.packages()){install.packages("rstatix")}
library(rstatix)
if(!"rstatix" %in% installed.packages()){install.packages("rstatix")}
library(rstatix)
qqPlot(metabolomicsDataGroups_transformed$XXL.VLDL.PL_.)
?qqPlot
??qqPlo
??qqPlot
qqPlot(metabolomicsDataGroups_transformed$'XXL.VLDL.PL_.')
if(!"car" %in% installed.packages()){install.packages("car")}
library(car)
if(!"nloptr" %in% installed.packages()){install.packages("nloptr")}
if(!"car" %in% installed.packages()){install.packages("car")}
R.version()
version
library(car) #(Companion to Applied Regression)
# check if libraries are already installed > otherwise install it
if(!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager",repos = "http://cran.us.r-project.org")
if(!"dplyr" %in% installed.packages()) BiocManager::install("dplyr")
if(!"stringr" %in% installed.packages()){install.packages("stringr")}
#load libraries
library(dplyr)
library(stringr)
library(car) #(Companion to Applied Regression)
install.packages('car')
BiocManager::available('car')
BiocManager::install(car, type = "source", checkBuilt = TRUE)
BiocManager::install("car")
library(car) #(Companion to Applied Regression)
# Libraries
library(ggplot2)
library(dplyr)
library(forcats)
if(!"forcats" %in% installed.packages()){install.packages("forcats")}
library(forcats)
library(hrbrthemes)
if(!"hrbrthemes" %in% installed.packages()){install.packages("hrbrthemes")}
library(hrbrthemes)
# check if libraries are already installed > otherwise install it
if(!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager",repos = "http://cran.us.r-project.org")
if(!"dplyr" %in% installed.packages()) BiocManager::install("dplyr")
if(!"stringr" %in% installed.packages()){install.packages("stringr")}
#load libraries
library(dplyr)
library(stringr)
# check if libraries are already installed > otherwise install it
if(!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager",repos = "http://cran.us.r-project.org")
if(!"dplyr" %in% installed.packages()) BiocManager::install("dplyr")
if(!"stringr" %in% installed.packages()){install.packages("stringr")}
#load libraries
library(dplyr)
library(stringr)
#Download ‘readxl’ package
if(!"readxl" %in% installed.packages()){install.packages("readxl")}
#Load the ‘readxl’ package
install.package("readxl")
if(!"readxl" %in% installed.packages()){install.packages("readxl")}
#Download ‘readxl’ package
if(!"readxl" %in% installed.packages()){install.packages("readxl")}
#Load the ‘readxl’ package
library("readxl")
#Add data location as variable
#Read the first tab of the data file
#Make a copy of the data to compare against if needed
#Download ‘readxl’ package
if(!"readxl" %in% installed.packages()){install.packages("readxl")}
#Load the ‘readxl’ package
library("readxl")
#Add data location as variable
dataLocation <- paste0(getwd(),
'/Data/NoMa_NMR_intervention_GEOcodes_Sent
Susan.xlsx')
#Read the first tab of the data file
#Make a copy of the data to compare against if needed
#Download ‘readxl’ package
if(!"readxl" %in% installed.packages()){install.packages("readxl")}
#Load the ‘readxl’ package
library("readxl")
#Add data location as variable
dataLocation <- paste0(getwd(),
'/Data/NoMa_NMR_intervention_GEOcodes_Sent
Susan.xlsx')
#Read the first tab of the data file
metabolomicsData <- read_excel(dataLocation, 1)
#Download ‘readxl’ package
if(!"readxl" %in% installed.packages()){install.packages("readxl")}
#Load the ‘readxl’ package
library("readxl")
#Add data location as variable
dataLocation <- paste0(getwd(),
'/Data/NoMa_NMR_intervention_GEOcodes_Sent Susan.xlsx')
#Read the first tab of the data file
metabolomicsData <- read_excel(dataLocation, 1)
#Make a copy of the data to compare against if needed
#Download ‘readxl’ package
if(!"readxl" %in% installed.packages()){install.packages("readxl")}
#Load the ‘readxl’ package
library("readxl")
#Add data location as variable
dataLocation <- paste0(getwd(),
'/Data/NoMa_NMR_intervention_GEOcodes_Sent Susan.xlsx')
#Read the first tab of the data file
metabolomicsData <- read_excel(dataLocation, 1)
#Make a copy of the data to compare against if needed
View(metabolomicsData)
metabolomicsData[metabolomicsData == "NA"] <- NA
sum(is.na(metabolomicsData$`Sample name` == "..."))
install.packages("heatmaply")
library("heatmaply")
heatmaply::heatmaply(is.na10(metabolomicsData[,3:100], grid_gap = 1, colors = heat.colors(200), showticklabels = c(T, F), margins = c(80, 10)))
metabolomicsData <- data.frame(metabolomicsData[,1:2], lapply(metabolomicsData[,3:length(metabolomicsData)],as.numeric))
metabolomicsData <- metabolomicsData[complete.cases(metabolomicsData[ , 3:length(metabolomicsData)]),]
heatmaply::heatmaply((metabolomicsData[,3: 100], grid_gap = 1, colors = heat.colors(200), showticklabels = c(T, F), margins = c(80, 10)))
heatmaply::heatmaply((metabolomicsData[,3:
100], grid_gap = 1, colors = heat.colors(200),
heatmaply::heatmaply(metabolomicsData[,3: 100], grid_gap = 1, colors = heat.colors(200), showticklabels = c(T, F), margins = c(80, 10))
dataLocation <- paste0(getwd(), '/Data/ ... .csv')
treatmentData <- read.csv(dataLocation, header = TRUE)
dataLocation <- paste0(getwd(), '/Data/ targets.csv')
treatmentData <- read.csv(dataLocation, header = TRUE)
dataLocation <- paste0(getwd(), '/Data/targets.csv')
treatmentData <- read.csv(dataLocation, header = TRUE)
View(treatmentData)
treatmentData$SampleName<-gsub("X","",as.character(treatmentData$SampleName))
treatmentData$SampleName<-gsub("\\..*","",as.character(treatmentData$SampleName))
treatmentData$...<-gsub("line","",as.character(treatmentData$...))
treatmentData$Timepoint<-gsub("line","",as.character(treatmentData$...))
treatmentData$Timepoint<-gsub("line","",as.character(treatmentData$Timepoint))
colnames(treatmentData) <- c("Sample.name","time","Diet" )
metabolomicsDataGroups <- merge(treatmentData, metabolomicsData,by="Sample.name")
View(metabolomicsDataGroups)
colnames(treatmentData) <- c("Sample.name","Timepoint","Diet" )
metabolomicsDataGroups <- merge(treatmentData, metabolomicsData,by="Sample.name")
all(metabolomicsDataGroups$Timepoint == metabolomicsDataGroups$time)
columns <- ncol(metabolomicsDataGroups)
columns <- 102
transformation <- "log_2"
(transformation == "log_2"){
(transformation == "log_2")
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log2(metabolomicsDataGroups[,5:columns]))
if(transformation == "cube_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/3))
}else if(transformation == "square_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/2))
}else if(transformation == "log_2"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log2(metabolomicsDataGroups[,5:columns]))
}else if(transformation == "log_10"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log10(metabolomicsDataGroups[,5:columns]))
}else{print("Warning: name for transformation not recognized")}
hist(metabolomicsDataGroups[,5], col='steelblue', main='Original')
hist(metabolomicsDataGroups_transformed[,5], col='coral2', main=transformation)
hist(metabolomicsDataGroups[,5], col='steelblue', main='Original')
hist(metabolomicsDataGroups_transformed[,5], col='coral2', main=transformation)
metabolomicsDataGroups_Shapiro <- lapply(metabolomicsDataGroups[,5:columns], shapiro.test)
metabolomicsDataGroups_transformed_Shapiro <- lapply(metabolomicsDataGroups_transformed[,5:columns], shapiro.test)
metabolomicsDataGroups_Shapiro_pvalues <- do.call(rbind, metabolomicsDataGroups_Shapiro)
metabolomicsDataGroups_transformed_Shapiro_pvalues <- do.call(rbind, metabolomicsDataGroups_transformed_Shapiro)
metabolomicsDataGroups_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
metabolomicsDataGroups_transformed_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_transformed_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
percentageThreshold <- floor(((columns)/10)*7.5)
if(metabolomicsDataGroups_transformed_Shapiro_pvalues_sum[1] > percentageThreshold ){paste0("Data after ", transformation ," transformation seems to follow a normal distribution for 75% or more of your data")} else{
print("Advised to select a different data transformation procedure")}
transformation <- "cube_root"
if(transformation == "cube_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/3))
}else if(transformation == "square_root"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], metabolomicsDataGroups[,5:columns]^(1/2))
}else if(transformation == "log_2"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log2(metabolomicsDataGroups[,5:columns]))
}else if(transformation == "log_10"){
metabolomicsDataGroups_transformed <- cbind(metabolomicsDataGroups[,c(1:4)], log10(metabolomicsDataGroups[,5:columns]))
}else{print("Warning: name for transformation not recognized")}
hist(metabolomicsDataGroups[,5], col='steelblue', main='Original')
hist(metabolomicsDataGroups_transformed[,5], col='coral2', main=transformation)
metabolomicsDataGroups_Shapiro <- lapply(metabolomicsDataGroups[,5:columns], shapiro.test)
metabolomicsDataGroups_transformed_Shapiro <- lapply(metabolomicsDataGroups_transformed[,5:columns], shapiro.test)
metabolomicsDataGroups_Shapiro_pvalues <- do.call(rbind, metabolomicsDataGroups_Shapiro)
metabolomicsDataGroups_transformed_Shapiro_pvalues <- do.call(rbind, metabolomicsDataGroups_transformed_Shapiro)
metabolomicsDataGroups_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
metabolomicsDataGroups_transformed_Shapiro_pvalues_sum <- sum(metabolomicsDataGroups_transformed_Shapiro_pvalues[,2] >= 0.05, na.rm=TRUE)
percentageThreshold <- floor(((columns)/10)*7.5)
if(metabolomicsDataGroups_transformed_Shapiro_pvalues_sum[1] > percentageThreshold ){paste0("Data after ", transformation ," transformation seems to follow a normal distribution for 75% or more of your data")} else{
print("Advised to select a different data transformation procedure")}
heatmaply::heatmaply((metabolomicsDataGroups_transformed[,3:
100], grid_gap = 1, colors = heat.colors(200),
heatmaply::heatmaply(metabolomicsDataGroups_transformed[,3:
100], grid_gap = 1, colors = heat.colors(200),
showticklabels = c(T, F), margins = c(80, 10))
if(!"ggplot2" %in% installed.packages()){install.packages("ggplot2")}
library(ggplot2)
if(!"forcats" %in% installed.packages()){install.packages("forcats")}
library(forcats)
if(!"hrbrthemes" %in% installed.packages()){install.packages("hrbrthemes")}
library(hrbrthemes)
if(!"viridis" %in% installed.packages()){install.packages("viridis")}
library(viridis)
if(!"ggbeeswarm" %in% installed.packages()){install.packages("ggbeeswarm")}
library(ggbeeswarm)
##### Example data to check if setup of packages is correct #####
# Load dataset from github
data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/10_OneNumSevCatSubgroupsSevObs.csv", header=T, sep=",") %>%
mutate(tip = round(tip/total_bill*100, 1))
data %>%
mutate(day = fct_reorder(day, tip)) %>%
mutate(day = factor(day, levels=c("Thur", "Fri", "Sat", "Sun"))) %>%
ggplot(aes(fill=sex, y=tip, x=day)) +
geom_violin(position="dodge", alpha=0.5, outlier.colour="transparent") +
scale_fill_viridis(discrete=T, name="") +
theme_ipsum()  +
xlab("") +
ylab("Tip (%)") +
ylim(0,40)
?geom_violin
data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/10_OneNumSevCatSubgroupsSevObs.csv", header=T, sep=",") %>%
mutate(tip = round(tip/total_bill*100, 1))
lipidClassName <- 'IDL.L'
columnNumber <- which( colnames(metabolomicsDataGroups_transformed)==lipidClassName )
maxVerticalAxis <- max(metabolomicsDataGroups_transformed[,columnNumber])
metabolomicsDataGroups_transformed %>%
mutate(Diet =  fct_reorder(Diet, IDL.L)) %>%
mutate(Diet = factor(Diet, levels=c("Control", "Experimental"))) %>%
ggplot(aes(fill=Diet, y=IDL.L, x=time)) +
geom_violin(position="dodge", alpha=0.5, trim = FALSE, scale = "count") +
geom_quasirandom() + ##Alternativ geom_beeswarm() +
scale_fill_viridis(discrete=T, name="Timepoints") +
theme_ipsum()  +
xlab(lipidClassName) +
ylab("Measurement (transformed)") +
ylim(0,maxVerticalAxis)
